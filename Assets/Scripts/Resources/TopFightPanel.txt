--[[
    @desc: 控制战斗界面
    @author:yxy
]]
UnityEngine.Time.fixedDeltaTime = 0.1
local TopFightPanel = TopFightPanel or {}
function TopFightPanel:new()
    o = o or {}
    setmetatable( o, { __index = self }) 
    return o  
end

function TopFightPanel:Init()
    EventSystem:GetInstance():init()
    EventSystem:GetInstance():AddListener("Hello",function()  self:UpdateRound() end)
    local EventName  = EventSystem:GetInstance().EventName

    --获得当前关卡
    local level = 1
    --生成关卡数据
    self:InitData(level)
    --生成Panel
    self:InitPanel()
    Debug.Log(" TopFightPanel:Init")
end

function TopFightPanel:InitData()
    self.EnemyData = {}
    self.PlayerData= {}
    self.RoundData = {}  --这个是消消乐每回合传递过来的数据
    self.EnemyData = require "EnemyData"
    self.PlayerData= require "PlayerData"
end

function TopFightPanel:InitPanel()
    --获得组件
    self.C_Player= GameObject.Find("GuildCrushWindow/TopPanel/C_Player")
    self.Player  = GameObject.Find("GuildCrushWindow/TopPanel/C_Player/Player")
    self.Boss    = GameObject.Find("GuildCrushWindow/TopPanel/Enemy/Boss")
    self.FireBall= GameObject.Find("GuildCrushWindow/TopPanel/C_Player/fireball")
    self.hitImage= GameObject.Find("GuildCrushWindow/TopPanel/C_Player/fireball/hitImage")
    self.hp      = GameObject.Find("GuildCrushWindow/TopPanel/C_Player/Hp")
    self.FireBallImage = GameObject.Find("GuildCrushWindow/TopPanel/C_Player/fireball/fireballImage")
    -- self.hpAddImage    = GameObject.Find("GuildCrushWindow/TopPanel/C_Player/Hp/hpAddImage")
    self.hpAddText     = GameObject.Find("GuildCrushWindow/TopPanel/C_Player/Hp/hpAddText"):GetComponent(Text)

    self.Playerrect  = self.Player.transform
    self.FireBallrect= self.FireBall.transform
    self.BossAnim    = self.Boss:GetComponent(Animator)
    self.PlayerAnim  = self.C_Player:GetComponent(Animator)
    self.hitImage:SetActive(false)
    self.FireBallImage:SetActive(false)
    self.hp:SetActive(false)

    --怪物倒计回合
    local AttackCountDown_text = GameObject.Find("GuildCrushWindow/TopPanel/Enemy/AttackCountDown_text"):GetComponent(Text)
    AttackCountDown_text.text = self.EnemyData.FightRound
    
    --UI
    self.Hp_text     = GameObject.Find("GuildCrushWindow/TopPanel/UIState/Hp_text"):GetComponent(Text)
    self.Energy_text = GameObject.Find("GuildCrushWindow/TopPanel/UIState/Energy_text"):GetComponent(Text)
    self.Shield_text = GameObject.Find("GuildCrushWindow/TopPanel/UIState/Shield_text"):GetComponent(Text)
    self.Level_text  = GameObject.Find("GuildCrushWindow/TopPanel/UIState/Level_text/Level_text (1)"):GetComponent(Text)

    self.Hp_text.text    = self.PlayerData.HP_cur    .. "/" .. self.PlayerData.Hp_total
    self.Energy_text.text= self.PlayerData.Energy_cur.. "/" .. self.PlayerData.Energy_total
    self.Shield_text.text= self.PlayerData.Shield_cur.. "/" .. self.PlayerData.Shield_total
    self.Level_text.text = 1

    local data = {
         [1] = {type = 1 , times = 1} --回血
        ,[2] = {type = 2 , times = 1} --回盾
        ,[3] = {type = 3 , times = 1} --加能量
        ,[4] = {type = 4 , times = 1} --攻击
    }
    self:UpdateRound(data) --假设现在传进来一个数据

    -- 测试专用
    -- LuaTimer.Add(10000,function() 
    -- --怪物收到攻击逻辑处理
    --     self:UpdateRound(data)
    -- end)
end
 
--更新回合数据（通过事件访问）
function TopFightPanel:UpdateRound(data)
    if data == nil then
        Debug.LogError("UpdateRound没有传参")
        return
    end  
    --判断传进来的数据是什么类型
    for i,v in pairs(data) do --遍历数据
        --血量
        if v.type  == 1 then
            --先播放加血动画
            self.hp:SetActive(true)
            self.PlayerAnim:SetBool("Hpadd",true )
            self.hpAddText.text = self.PlayerData.Item.Hp * v.times
            self.player_AttackTimer = LuaTimer.Add(400,function()
                self.hp:SetActive(false)
                self.PlayerAnim:SetBool("Hpadd",false)
                -- self.PlayerAnim:SetBool("Hpadd",true)
            end)
            self.PlayerData.HP_cur  = self.PlayerData.HP_cur + (self.PlayerData.Item.Hp * v.times)
            --如果血量超过100
            if self.PlayerData.HP_cur >= self.PlayerData.Hp_total then 
                self.PlayerData.HP_cur = self.PlayerData.Hp_total
            end
            self.Hp_text.text    = self.PlayerData.HP_cur    .. "/" .. self.PlayerData.Hp_total --更新血量
        --护盾
        elseif v.type == 2 then
        --攻击
        elseif v.type == 3 then

        elseif v.type == 4 then 
            self:PlayerAttack(v)
        else
            Debug.LogError("传进来的数据是错的")
        end
    end
end

function TopFightPanel:PlayerAttack(AttackData)
    if AttackData == nil then 
        return 
    end
    -- 接下来的逻辑是 ： 向前移动 : 向前移动Timer结束 ：攻击动画 ：攻击 ： 攻击结束 ： 向后移动返回
    self:_PlayerAttack()
end

function TopFightPanel:_PlayerAttack()
    self.playerMoveCur = self.playerMoveCur or  0  --玩家移动的计数
    self.playerMoveCount=self.playerMoveCount or 20--玩家移动的总步数
    self.playerMoveOffSet = self.playerMoveOffSet or Vector3(20,0,0) 
    self.FireBallStartPosition  = self.FireBallrect.localPosition
    self.playerRoteOffSet = 0
    self.player_MoveTimer = LuaTimer.Add(0,10,function()
        self:PlayerAttackForward()
    end)
end

function TopFightPanel:PlayerAttackForward()
    if self.playerMoveCount==nil  then 
        Debug.LogError("为调用Update就移动，违法")
    end
    self.playerMoveCur = self.playerMoveCur + 1 

    if self.playerMoveCur < self.playerMoveCount/2 then 
        self.playerRoteOffSet = self.playerMoveCur * 2
    else
        self.playerRoteOffSet = (self.playerMoveCount - self.playerMoveCur) *2
    end

    --向前移动结束
    if self.playerMoveCur ==self.playerMoveCount then 
        self.Playerrect.rotation =  Quaternion.Euler(0, 0, self.playerRoteOffSet)
        self.playerMoveCur =  0  --玩家移动的计时清空

        --发射火球
        self.FireBallImage:SetActive(true)
        self.player_AttackTimer = LuaTimer.Add(0,10,function()
            self:AttackEnemy()
        end)

        if self.player_MoveTimer then   
            LuaTimer.Delete(self.player_MoveTimer)
            -- 攻击怪物
            self.player_MoveTimer = nil
        end
    --移动
    else 
        self.Playerrect.rotation =  Quaternion.Euler(0, 0, self.playerRoteOffSet)
    end
end

function TopFightPanel:AttackEnemy()
    if self.playerMoveCount==nil  then 
        Debug.LogError("为调用Update就移动，违法")
    end
    self.playerMoveCur = self.playerMoveCur + 1 

    --攻击展示结束
    if self.playerMoveCur ==self.playerMoveCount then 
        self.playerMoveCur =  0  --玩家移动的计时清空
        if self.player_AttackTimer then
            LuaTimer.Delete(self.player_AttackTimer)
            --玩家返回
            self.BossAnim:SetBool("GetHit",true)
            self.FireBallImage:SetActive(false)
            self.hitImage:SetActive(true)
            LuaTimer.Add(1000,function()
            --怪物收到攻击逻辑处理
                self.BossAnim:SetBool("GetHit",false) 
            end)
            LuaTimer.Add(100,function()
                 self.hitImage:SetActive(false)--怪物收到攻击逻辑处理
                 self.FireBallrect.localPosition = self.FireBallStartPosition
            end)
            self.player_AttackTimer = nil
        end
    else
        self.FireBallrect.localPosition = self.FireBallrect.localPosition + self.playerMoveOffSet
    end
end

function TopFightPanel:EnemyGetHit()

end
return TopFightPanel
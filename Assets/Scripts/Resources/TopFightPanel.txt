--[[
    @desc: 控制战斗界面
    @author:yxy
]]
UnityEngine.Time.fixedDeltaTime = 0.1
local TopFightPanel = TopFightPanel or {}
-- local XXL = require "XXL"
function TopFightPanel:new()
    o = o or {}
    setmetatable( o, { __index = self }) 
    return o  
end

function TopFightPanel:Init()
    EventSystem:GetInstance():init()
    EventSystem:GetInstance():AddListener("Hello",function()  self:UpdateRound() end)
    -- local EventName  = EventSystem:GetInstance().EventName

    --获得当前关卡
    local level = 1
    --生成关卡数据
    self:InitData(level)
    --生成Panel
    self:InitPanel()
    Debug.Log(" TopFightPanel:Init")
end

function TopFightPanel:InitData()
    self.EnemyData = {}
    self.PlayerData= {}
    self.RoundData = {}  --这个是消消乐每回合传递过来的数据
    self.EnemyData = require "EnemyData"
    self.PlayerData= require "PlayerData"
    self.PlayerData.HP_cur= self.PlayerData.Hp_total
    self.EnemyData.Hp_cur  = self.EnemyData.Hp_total
    self.EnemyData.FightRound_cur = self.EnemyData.FightRound
end

function TopFightPanel:GetInstance()
    if TopFightPanel.Instance then
        return TopFightPanel.Instance
    end
    TopFightPanel.Instance = self
    return TopFightPanel.Instance
end
function TopFightPanel:InitPanel()
    --玩家获得组件
    self.Main    = GameObject.Find("GuildCrushWindow")
    self.C_Player= GameObject.Find("GuildCrushWindow/TopPanel/C_Player")
    self.Boss    = GameObject.Find("GuildCrushWindow/TopPanel/Enemy/Boss")
    self.LosePanel=self.Main.transform:Find("LosePanel").gameObject
    self.WinPanel =self.Main.transform:Find("WinPanel").gameObject
    self.WinPanel:GetComponent(Button).onClick:AddListener(
        function()
            if self._enemyHpLoading then 
                LuaTimer.Delete(self._enemyHpLoading)
                self._enemyHpLoading = nil 
            end
            if self._enemy_Round then 
                LuaTimer.Delete(self._enemy_Round)
            end
            if self.player_MoveTimer then 
                LuaTimer.Delete(self.player_MoveTimer)
            end
            if self.player_AttackTimer then 
                LuaTimer.Delete(self.player_AttackTimer)
            end
            if self._enemyHpLoadin then 
                LuaTimer.Delete(self._enemyHpLoadin)
            end
            if self._BossMove then 
                LuaTimer.Delete(self._BossMove)
            end
            LoadScene.LoadScene__s(0)
        end
    )
    self.LosePanel:GetComponent(Button).onClick:AddListener(
        function()
            LoadScene.LoadScene__s(0)
        end
    )
    -- self.SelectPanel = self.Main.transform:Find("Down/SelectPanel").gameObject
    -- self.SelectPanel:SetActive(false)
    self.WinPanel:SetActive(false)
    self.LosePanel:SetActive(false)
    self.EnemyAttackImage = GameObject.Find("GuildCrushWindow/TopPanel/Enemy/EnemyAttack"):GetComponent(Image)
    self.FireBall =self.C_Player.transform:Find("fireball").gameObject
    self.Player  = self.C_Player.transform:Find("Player").gameObject
    self.hp      = self.C_Player.transform:Find("Hp").gameObject
    self.Energy  = self.C_Player.transform:Find("Energy").gameObject
    self.Shield  = self.C_Player.transform:Find("Shield").gameObject
    self.hitImage= self.FireBall.transform:Find("hitImage").gameObject
    self.FireBallImage = self.FireBall.transform:Find("fireballImage").gameObject
    self.hpAddText     = self.hp.transform:Find("hpAddText").gameObject:GetComponent(Text)
    self.hpAddText.text= self.PlayerData.Item.Hp
    self.EnergyAddText = self.Energy.transform:Find("EnergyAddText").gameObject:GetComponent(Text)
    self.EnergyAddText.text = self.PlayerData.Item.Energy
    self.ShieldText = self.Shield.transform:Find("ShieldText").gameObject:GetComponent(Text)
    self.ShieldText.text = self.PlayerData.Item.Shield
     
    self.Playerrect  = self.Player.transform
    self.FireBallrect= self.FireBall.transform
    self.BossAnim    = self.Boss:GetComponent(Animator)
    self.PlayerAnim  = self.C_Player:GetComponent(Animator)
    -- self.PlayerAnim  = self.C_Player:GetComponent(Animator)
    self.hitImage:SetActive(false)
    self.FireBallImage:SetActive(false)
    self.hp:SetActive(false)
    self.Energy:SetActive(false)
    self.Shield:SetActive(false)
    self.EnemyAttackImage.gameObject:SetActive(false)

    --怪物相关
    self.AttackCountDown_text = GameObject.Find("GuildCrushWindow/TopPanel/Enemy/AttackCountDown_text"):GetComponent(Text)
    self.AttackCountDown      = GameObject.Find("GuildCrushWindow/TopPanel/Enemy/AttackCountDown")
    self.AttackCountDown_text.text = self.EnemyData.FightRound_cur
    
    --UI
    self.UIState     = GameObject.Find("GuildCrushWindow/TopPanel/UIState")
    self.Hp_text     = self.UIState.transform:Find("Hp_text/Hp_text").gameObject:GetComponent(Text)
    self.EnergytextObj= self.UIState.transform:Find("Energy_text").gameObject
    self.FirstClickEnergy = self.UIState.transform:Find("FirstClickEnergy").gameObject
    self.isfirstClickEnergy =true
    self.Energy_text = self.UIState.transform:Find("Energy_text/Energy_text").gameObject:GetComponent(Text)
    self.Shield_text = self.UIState.transform:Find("Shield_text/Shield_text").gameObject:GetComponent(Text)
    self.Level_text  = self.UIState.transform:Find("Level_text/Level_text (1)").gameObject:GetComponent(Text)
    
    --怪物相关组件
    self.BossHpBar = self.UIState.transform:Find("BossHpBg/BossHpBar").gameObject:GetComponent(Image)
    self.BossHpLoad= self.UIState.transform:Find("BossHpBg/BossHpLoad").gameObject:GetComponent(Image)
    self.BossHpText= self.UIState.transform:Find("BossHpBg/BossHpText").gameObject:GetComponent(Text)
    self.Hp_text_Bar=self.UIState.transform:Find("Hp_text/Hp_text_Bar").gameObject:GetComponent(Image)
    self.EnergyActive=self.UIState.transform:Find("EnegyActive")
    self.EnergyActiveBtn = self.EnergyActive.gameObject:GetComponent(Button)
    self.Energy_text_Bar=self.UIState.transform:Find("Energy_text/Energy_text_Bar").gameObject:GetComponent(Image)
    self.Shield_text_Bar=self.UIState.transform:Find("Shield_text/Shield_text_Bar").gameObject:GetComponent(Image)

    self.BossHpText.text = self.EnemyData.Hp_cur .. "/" .. self.EnemyData.Hp_total
    self.BossHpBar.fillAmount = self.EnemyData.Hp_cur/self.EnemyData.Hp_total

    self.Hp_text.text    = self.PlayerData.HP_cur  --[[  .. "/" .. self.PlayerData.Hp_total]]
    self.Hp_text_Bar.fillAmount = self.PlayerData.HP_cur / self.PlayerData.Hp_total

    self.Energy_text.text= self.PlayerData.Energy_cur --[[.. "/" .. self.PlayerData.Energy_total]]
    self.Energy_text_Bar.fillAmount=self.PlayerData.Energy_cur/self.PlayerData.Energy_total

    self.Shield_text.text= self.PlayerData.Shield_cur --[[ "/" .. self.PlayerData.Shield_total]]
    self.Shield_text_Bar.fillAmount=self.PlayerData.Shield_cur/self.PlayerData.Shield_total
    self.Level_text.text = 1
    
    self.is_init = true
    
    --是否有能量buff状态
    self.is_Energy = false
    self.EnergyActiveBtn.onClick:AddListener(
        function()
            self.EnergyActiveBtn= true
            self.Shield_text.text = self.PlayerData.Shield_cur
            self.Shield_text_Bar.fillAmount = self.PlayerData.Shield_cur / self.PlayerData.Shield_total
            self.EnergyActive.gameObject:SetActive(false)
            self.EnergytextObj:SetActive(true)
            Debug.Log(self.is_Energy)
        end
    )
    -- local info = {
    --      [1] = {type = 1 } --回血
    --     ,[2] = {type = 2 } --回盾
    --     ,[3] = {type = 3 } --加能量
    --     ,[4] = {type = 4 } --攻击
    --     ,[5] = {type = 1 }
    -- }
    -- 测试专用
    -- self:UpdateRound(info) --假设现在传进来一个数据
    
    -- LuaTimer.Add(10000,function() 
    -- --怪物收到攻击逻辑处理
    --     self:UpdateRound(data)
    -- end)
end

function TopFightPanel:CallBack()
    XXLPanel:Fall()
end
--更新回合数据（通过事件访问）
function TopFightPanel:UpdateRound(info)
    
    if info == nil then
        Debug.LogError("UpdateRound没有传参")
        return
    end
    local isCallBack = true 
    local CallBackType = 1 --1.为道具回调 ， 2 为攻击回调
    local data = {}
    local times= {[1]=0,[2]=0,[3]=0,[4]=0,[5]=0}
    local isFirstClick = info.isFirstClick--小小的传参
    for i,v in pairs(info) do
        if(type(v)=="table")then--小小的修改
            if v.type == 1 then 
                times[1] = times[1] + 1 
            elseif v.type ==2 then 
                times[2] = times[2] + 1
            elseif v.type ==3 then 
                times[3] = times[3] + 1 
            elseif v.type ==4 then 
                times[4] = times[4] + 1 
                CallBackType = 2 
            elseif v.type ==5 then 
                times[5] = times[5] + 1
                isCallBack =false 
            end
        end--小小的修改
    end
    for i,v in pairs(times) do 
        if v ~= 0 then 
            data[i] = {type = i , time = v}
        end
    end

    -- for i,v in pairs(data) do 
    --     Debug.Log(v.type .."  ".. v.time)
    -- end
    if isCallBack then 
        if CallBackType == 2  then 
            self._enemy_Round = LuaTimer.Add(1500, function ()
                self:CallBack()
            end)
        else
            self._enemy_Round = LuaTimer.Add(1000, function ()
                self:CallBack()
            end)
        end
    end
    -- self.SelectPanel:SetActive(true)
    --判断传进来的数据是什么类型
    for i,v in pairs(data) do --遍历数据
        --血量
        if v.type  == 1 then
            -- self.SelectPanel:SetActive(true)
            --先播放加血动画
            -- self.hp:SetActive(true)
            self.hpAddList = {}
            for i= 1,v.time do 
                LuaTimer.Add(300*(i-1),function ()
                    self.hpAddList[i] = GameObject.Instantiate(self.hp,self.C_Player.transform)
                    self.hpAddList[i]:SetActive(true) 
                end )
                LuaTimer.Add(300*(i-1)+600,function ()
                    GameObject.Destroy(self.hpAddList[i])
                end)
            end          
            -- self.player_AddHpTimer = LuaTimer.Add(600,function()
            --     self.hp:SetActive(false)
            --     -- self.PlayerAnim:SetBool("Hpadd",false)
            -- end)
            self.PlayerData.HP_cur  = self.PlayerData.HP_cur + (self.PlayerData.Item.Hp * v.time)
            -- self.PlayerData.HP_cur  = self.PlayerData.HP_cur + (self.PlayerData.Item.Hp )
            --如果血量超过100
            if self.PlayerData.HP_cur >= self.PlayerData.Hp_total then 
                self.PlayerData.HP_cur = self.PlayerData.Hp_total
            end
            self.Hp_text.text    = self.PlayerData.HP_cur --[[  .. "/" .. self.PlayerData.Hp_total --更新血量 ]]
            self.Hp_text_Bar.fillAmount = self.PlayerData.HP_cur / self.PlayerData.Hp_total
        --护盾
        elseif v.type == 2 then
            -- self.SelectPanel:SetActive(true)
            --播放加护盾动画
            self.shieldAddList = {}
            for i= 1,v.time do 
                LuaTimer.Add(300*(i-1),function ()
                    self.shieldAddList[i] = GameObject.Instantiate(self.Shield,self.C_Player.transform)
                    self.shieldAddList[i]:SetActive(true) 
                end )
                LuaTimer.Add(300*(i-1)+500,function ()
                    GameObject.Destroy(self.shieldAddList[i])
                end)
            end      
            self.PlayerData.Shield_cur=self.PlayerData.Shield_cur + (self.PlayerData.Item.Shield * v.time)
            if self.PlayerData.Shield_cur >= self.PlayerData.Shield_total then 
                self.PlayerData.Shield_cur = self.PlayerData.Shield_total
            end
            self.Shield_text.text = self.PlayerData.Shield_cur
            self.Shield_text_Bar.fillAmount = self.PlayerData.Shield_cur / self.PlayerData.Shield_total
        --能量
        elseif v.type == 3 then
            -- self.SelectPanel:SetActive(true)
            --播放加护盾动画
            self.energyAddList = {}
            for i= 1,v.time do 
                LuaTimer.Add(250*(i-1),function ()
                    self.energyAddList[i] = GameObject.Instantiate(self.Energy,self.C_Player.transform)
                    self.energyAddList[i]:SetActive(true) 
                end )
                LuaTimer.Add(250+700*(i),function ()
                    GameObject.Destroy(self.energyAddList[i])
                end)
            end      
            self.PlayerData.Energy_cur=self.PlayerData.Energy_cur + (self.PlayerData.Item.Energy * v.time)
            if self.PlayerData.Energy_cur >= self.PlayerData.Energy_total then 
                self.PlayerData.Energy_cur = self.PlayerData.Energy_total
                --显示能量按钮
                self.EnergyActive.gameObject:SetActive(true)
                self.EnergytextObj:SetActive(false)
            end
            self.Energy_text.text = self.PlayerData.Energy_cur
            self.Energy_text_Bar.fillAmount = self.PlayerData.Energy_cur / self.PlayerData.Energy_total
        --攻击
        elseif v.type == 4 then 
            -- self.SelectPanel:SetActive(true)
            self:PlayerAttack(v)
        elseif v.type == 5 then
            LuaTimer.Add(500,function ()
                    self:EnemyRound()
            end)
        else
            Debug.LogError("传进来的数据是错的")
        end
    end
end

function TopFightPanel:PlayerAttack(AttackData)
    if AttackData == nil then 
        return 
    end
    -- 接下来的逻辑是 ： 向前移动 : 向前移动Timer结束 ：攻击动画 ：攻击 ： 攻击结束 ： 向后移动返回
    self:_PlayerAttack()
end

function TopFightPanel:_PlayerAttack()
    self.playerMoveCur = self.playerMoveCur or  0  --玩家移动的计数
    self.playerMoveCount=self.playerMoveCount or 20--玩家移动的总步数
    self.playerMoveOffSet = self.playerMoveOffSet or Vector3(12,0,0) 
    self.FireBallStartPosition  = self.FireBallrect.localPosition
    self.playerRoteOffSet = 0
    self.player_MoveTimer = LuaTimer.Add(0,10,function()
        self:PlayerAttackForward()
    end)
end

function TopFightPanel:PlayerAttackForward()
    if self.playerMoveCount==nil  then 
        Debug.LogError("为调用Update就移动，违法")
    end
    self.playerMoveCur = self.playerMoveCur + 1 

    if self.playerMoveCur < self.playerMoveCount/2 then 
        self.playerRoteOffSet = self.playerMoveCur * 2
    else
        self.playerRoteOffSet = (self.playerMoveCount - self.playerMoveCur) *2
    end

    --向前移动结束
    if self.playerMoveCur ==self.playerMoveCount then 
        self.Playerrect.rotation =  Quaternion.Euler(0, 0, self.playerRoteOffSet)
        self.playerMoveCur =  0  --玩家移动的计时清空

        --发射火球
        self.FireBallImage:SetActive(true)
        self.player_AttackTimer = LuaTimer.Add(0,10,function()
            self:AttackEnemy()
        end)

        if self.player_MoveTimer then   
            LuaTimer.Delete(self.player_MoveTimer)
            -- 攻击怪物
            self.player_MoveTimer = nil
        end
    --移动
    else 
        self.Playerrect.rotation =  Quaternion.Euler(0, 0, self.playerRoteOffSet)
    end
end

function TopFightPanel:AttackEnemy()
    if self.playerMoveCount==nil  then 
        Debug.LogError("为调用Update就移动，违法")
    end
    self.playerMoveCur = self.playerMoveCur + 1 
    --攻击展示结束
    if self.playerMoveCur ==self.playerMoveCount then 
        self.playerMoveCur =  0  --玩家移动的计时清空
        if self.player_AttackTimer then
            LuaTimer.Delete(self.player_AttackTimer)
            --玩家返回
            self.BossAnim:SetBool("GetHit",true)
            --怪物收到攻击逻辑处理
            self:EnemyGetHit()
            self.FireBallImage:SetActive(false)
            self.hitImage:SetActive(true)
            LuaTimer.Add(1000,function()
                self.BossAnim:SetBool("GetHit",false) 
            end)
            LuaTimer.Add(100,function()
                 self.hitImage:SetActive(false)--怪物收到攻击逻辑处理
                 self.FireBallrect.localPosition = self.FireBallStartPosition
            end)
            self.player_AttackTimer = nil
        end
    else
        self.FireBallrect.localPosition = self.FireBallrect.localPosition + self.playerMoveOffSet
    end
end

function TopFightPanel:EnemyGetHit()
    --怪物扣血
    self.EnemyData.Hp_cur = self.EnemyData.Hp_cur - self.PlayerData.Power
    --判断它是否死亡
    if self.EnemyData.Hp_cur <= 0 then
        self.EnemyData.Hp_cur = 0
        LuaTimer.Delete(self._enemy_Round)
        --怪物死亡逻辑
        LuaTimer.Add(150,function ()
            self:ShowWin()
        end)
    end

    self.BossHpText.text = self.EnemyData.Hp_cur     .. "/" .. self.EnemyData.Hp_total
    self.BossHpBar.fillAmount = self.EnemyData.Hp_cur/self.EnemyData.Hp_total
    self._enemyHpLoading = LuaTimer.Add(0,100,function()
        self:EnemyHpLoading()
   end)
end
function TopFightPanel:EnemyHpLoading()
    self.BossHpLoad.fillAmount = self.BossHpLoad.fillAmount - 0.02
    if self.BossHpLoad.fillAmount <= self.BossHpBar.fillAmount then
        if self._enemyHpLoading then  
            --怪物扣完血之后,开始怪物的回合
            -- LuaTimer.Add(200,function()
                -- self:EnemyRound()
            -- end)
            LuaTimer.Delete(self._enemyHpLoading)
            self._enemyHpLoading = nil 
        end
    end
end
function TopFightPanel:ShowWin()
    self.WinPanel:SetActive(true)
    Debug.LogError("你赢了")
end
function TopFightPanel:EnemyRound()
    Debug.LogError("怪物的回合计算")
    --回合数减少
    self.EnemyData.FightRound_cur  = self.EnemyData.FightRound_cur -1 
    self.AttackCountDown_text.text = self.EnemyData.FightRound_cur
    --当回合数为0 ， 进入 怪物的攻击回合
    if self.EnemyData.FightRound_cur == 0 then
        self.AttackCountDown_text.gameObject:SetActive(false)
        self.AttackCountDown:SetActive(false)

        self._BossMove = LuaTimer.Add(200,function ()
            self:BossAttack()
        end)
        self.EnemyData.FightRound_cur = self.EnemyData.FightRound 
    else
        -- self.SelectPanel:SetActive(false)
    end
end
function TopFightPanel:BossAttack()
    self.PlayerAnim:SetBool("PlayerHit",true)
    self.EnemyAttackImage.gameObject:SetActive(true)
    --玩家扣血
    if self.PlayerData.Shield_cur >= self.EnemyData.Power then 
        --护盾值大于怪物扣血
        self.PlayerData.Shield_cur = self.PlayerData.Shield_cur - self.EnemyData.Power
        self.Shield_text.text = self.PlayerData.Shield_cur 
        self.Shield_text_Bar.fillAmount = self.PlayerData.Shield_cur / self.PlayerData.Shield_total
    -- 怪物攻击大于护盾
    else 
        local hitOffSet = self.EnemyData.Power - self.PlayerData.Shield_cur
        self.PlayerData.Shield_cur = 0 
        self.Shield_text.text = 0
        self.Shield_text_Bar.fillAmount = self.PlayerData.Shield_cur / self.PlayerData.Shield_total

        self.PlayerData.HP_cur =self.PlayerData.HP_cur - hitOffSet
        if self.PlayerData.HP_cur <= 0 then 
            self.PlayerData.HP_cur = 0 
            self.Hp_text.text = self.PlayerData.HP_cur
            self.Hp_text_Bar.fillAmount = self.PlayerData.HP_cur / self.PlayerData.Hp_total
            Debug.LogError("你TM输了")
            self.LosePanel:SetActive(true)
        else
            self.Hp_text.text = self.PlayerData.HP_cur
            self.Hp_text_Bar.fillAmount = self.PlayerData.HP_cur / self.PlayerData.Hp_total
        end
    end
    LuaTimer.Add(500, function ()
        self.PlayerAnim:SetBool("PlayerHit",false)
        self.AttackCountDown_text.text = self.EnemyData.FightRound
        self.AttackCountDown_text.gameObject:SetActive(true)
        self.AttackCountDown:SetActive(true)
        self.EnemyAttackImage.gameObject:SetActive(false)
        -- self.SelectPanel:SetActive(false)
    end)
    if self._BossMove then 
        LuaTimer.Delete(self._BossMove)
    end
end
return TopFightPanel